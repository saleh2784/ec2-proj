pipeline {
    agent any
    
    parameters {
        choice (name: 'process', choices: ['install', 'uninstall', 'yum-update'], description: 'Choose to install or uninstall')
    }

    stages {
        stage('Install') {
            when {
                expression { params.process == 'install' }
            }
            steps {
                ansiColor('xterm') {  // Wrap steps that need colored output
                    ansiblePlaybook(
                        playbook: "install/install.yaml",
                        inventory: "install/hosts.ini",
                        become: true,
                        extras: '-vvv',
                        forks: 1,
                        disableHostKeyChecking: true,
                        credentialsId: 'ssh-key',
                        colorized: true
                    )
                }
            }
        }
        stage('dnf update') {
            when {
                expression { params.process == 'yum-update' }
            }
            steps {
                ansiColor('xterm') {  // Wrap steps that need colored output
                    ansiblePlaybook(
                        playbook: "install/dnf-update.yaml",
                        inventory: "install/hosts.ini",
                        become: true,
                        extras: '-vvv',
                        forks: 1,
                        disableHostKeyChecking: true,
                        credentialsId: 'ssh-key',
                        colorized: true
                    )
                }
            }
        }

        stage('Uninstall') {
            when {
                expression { params.process == 'uninstall' }
            }
            steps {
                ansiColor('xterm') {  // Wrap steps that need colored output
                    ansiblePlaybook(
                        playbook: "install/uninstall.yaml",
                        inventory: "install/hosts.ini",
                        become: true,
                        extras: '-vvv',
                        forks: 1,
                        disableHostKeyChecking: true,
                        credentialsId: 'ssh-key',
                        colorized: true
                    )
                }
            }
        }
    }
}
